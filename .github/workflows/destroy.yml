# Name of the workflow: Destroy Solution
# This workflow is triggered manually using the GitHub Actions "workflow_dispatch" event.
name: Destroy Solution

# Trigger configuration: This workflow can be manually triggered.
on:
  workflow_dispatch:

# Environment variables:
# GCP_CREDENTIALS_JSON is set using a GitHub secret to securely store and access Google Cloud credentials.
env:
  GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}

# Jobs section: Defines the tasks to be executed as part of this workflow.
jobs:
  # Job name: Destroy Cloud Run
  # This job runs on the latest Ubuntu virtual environment provided by GitHub Actions.
  phase_0:
    runs-on: ubuntu-latest
    name: Destroy Cloud Run

    # Steps section: Defines the sequence of tasks to be executed within this job.
    steps:
      # Step 1: Checkout the repository code.
      # This step uses the official GitHub Actions "checkout" action to clone the repository.
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform.
      # This step installs Terraform using the official HashiCorp setup action.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 3: Destroy Cloud Run instances.
      # This step runs a series of commands to destroy Cloud Run resources using Terraform.
      - name: Destroy Cloud Run Instances
        run: |
          # Write the GCP credentials JSON (stored in the secret) to a file named "credentials.json".
          echo $GCP_CREDENTIALS_JSON > credentials.json

          # Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to the credentials file.
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"

          # Navigate to the "03-cloudrun" directory where the Terraform configuration for Cloud Run is located.
          cd "03-cloudrun"

          # Initialize the Terraform working directory and download necessary providers.
          terraform init

          # Destroy all resources managed by Terraform in this directory, automatically approving the action.
          terraform destroy -auto-approve

          # Navigate back to the root directory.
          cd ..

  # Job name: Destroy GAR Instance
  # This job runs on the latest Ubuntu virtual environment provided by GitHub Actions.
  # It depends on the successful completion of the "phase_0" job.
  phase_1:
    runs-on: ubuntu-latest
    needs: phase_0
    name: Destroy GAR Instance

    # Steps section: Defines the sequence of tasks to be executed within this job.
    steps:
      # Step 1: Checkout the repository code.
      # This step uses the official GitHub Actions "checkout" action to clone the repository.
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform.
      # This step installs Terraform using the official HashiCorp setup action.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 3: Destroy Google Artifact Registry (GAR) instance.
      # This step runs a series of commands to destroy GAR resources using Terraform.
      - name: Destroy GAR
        run: |
          # Write the GCP credentials JSON (stored in the secret) to a file named "credentials.json".
          echo $GCP_CREDENTIALS_JSON > credentials.json

          # Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to the credentials file.
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"

          # Navigate to the "01-gar" directory where the Terraform configuration for GAR is located.
          cd "01-gar"

          # Initialize the Terraform working directory and download necessary providers.
          terraform init

          # Destroy all resources managed by Terraform in this directory, automatically approving the action.
          terraform destroy -auto-approve

          # Navigate back to the root directory.
          cd ..