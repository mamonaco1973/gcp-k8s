# Name of the workflow: Check Build Environment
# This workflow is triggered manually using the GitHub Actions "workflow_dispatch" event.
name: Check Build Environment

# Trigger configuration: This workflow can be manually triggered.
on:
  workflow_dispatch:

# Environment variables:
# GCP_CREDENTIALS_JSON is set using a GitHub secret to securely store and access Google Cloud credentials.
env:
  GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}

# Jobs section: Defines the tasks to be executed as part of this workflow.
jobs:
  # Job name: Check Environment
  # This job runs on the latest Ubuntu virtual environment provided by GitHub Actions.
  validate:
    name: Check Environment
    runs-on: ubuntu-latest

    # Steps section: Defines the sequence of tasks to be executed within this job.
    steps:
      # Step 1: Checkout the repository code.
      # This step uses the official GitHub Actions "checkout" action to clone the repository.
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform.
      # This step installs Terraform using the official HashiCorp setup action.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 3: Set up Docker Buildx.
      # This step installs Docker Buildx, a CLI plugin for extended Docker build capabilities.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # Step 4: Set up Packer.
      # This step installs Packer, a tool for creating machine images, using the official HashiCorp setup action.
      - name: Setup Packer
        uses: hashicorp/setup-packer@v2

      # Step 5: Validate the build environment.
      # This step runs a series of commands to validate the tools and configurations required for the build.
      - name: Validate Build Environment
        run: |
          # Print the versions of key tools to ensure they are installed and accessible.
          gcloud --version
          terraform --version
          docker --version
          packer --version

          # Write the GCP credentials JSON (stored in the secret) to a file named "credentials.json".
          echo $GCP_CREDENTIALS_JSON > credentials.json
          echo "NOTE: Validating credentials.json and testing the gcloud command."

          # Check if the "credentials.json" file was created successfully.
          if [[ ! -f "./credentials.json" ]]; then
            # If the file does not exist, print an error message and exit with a failure code.
            echo "ERROR: The file './credentials.json' does not exist." >&2
            exit 1
          fi

          # Authenticate the Google Cloud service account using the credentials file.
          gcloud auth activate-service-account --key-file="./credentials.json"

          # Check for Terraform backend configuration in the "01-gar" directory.
          # The "grep" command searches for the keyword 'backend' in all .tf files in the directory.
          backend=$(grep -r 'backend ' ./01-gar/*.tf || true)
          if [ -z "$backend" ]; then
            # If no backend configuration is found, print an error message and exit with a failure code.
            echo "ERROR: No Terraform backend configuration is defined for 01-gar."
            exit 1
          fi

          # Check for Terraform backend configuration in the "03-cloudrun" directory.
          backend=$(grep -r 'backend ' ./03-cloudrun/*.tf || true)
          if [ -z "$backend" ]; then
            # If no backend configuration is found, print an error message and exit with a failure code.
            echo "ERROR: No Terraform backend configuration is defined for 03-cloudrun."
            exit 1
          fi

          # If all checks pass, print a success message.
          echo "NOTE: All required backend files exist."