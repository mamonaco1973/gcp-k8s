# Name of the workflow: Validate Solution
# This workflow is triggered manually using the GitHub Actions "workflow_dispatch" event.
name: Validate Solution

# Trigger configuration: This workflow can be manually triggered.
on:
  workflow_dispatch:

# Environment variables:
# GCP_CREDENTIALS_JSON is set using a GitHub secret to securely store and access Google Cloud credentials.
env:
  GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}

# Jobs section: Defines the tasks to be executed as part of this workflow.
jobs:
  # Job name: Validate Solution
  # This job runs on the latest Ubuntu virtual environment provided by GitHub Actions.
  validate:
    name: Validate Solution
    runs-on: ubuntu-latest

    # Steps section: Defines the sequence of tasks to be executed within this job.
    steps:
      # Step 1: Checkout the repository code.
      # This step uses the official GitHub Actions "checkout" action to clone the repository.
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Validate the solution.
      # This step runs a series of commands to validate the deployed solution on Google Cloud.
      - name: Validate Solution
        run: |
          # Write the GCP credentials JSON (stored in the secret) to a file named "credentials.json".
          echo $GCP_CREDENTIALS_JSON > credentials.json

          # Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to the credentials file.
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"

          # Authenticate the Google Cloud service account using the credentials file.
          gcloud auth activate-service-account --key-file="./credentials.json"

          # Extract the project_id from the credentials file using `jq`.
          project_id=$(jq -r '.project_id' "./credentials.json")

          # Set the active Google Cloud project to the one specified in the credentials.
          gcloud config set project $project_id

          # Get the service URL for the Cloud Run service named "flask-app-service".
          SERVICE_URL=$(gcloud run services list --platform managed --format="value(URL)" | grep "flask-app-service")

          # Check if the SERVICE_URL is empty or "None".
          if [[ -z "$SERVICE_URL" || "$SERVICE_URL" == "None" ]]; then
            # If the service URL is not found, print an error message and exit with a failure code.
            echo "ERROR: Service URL for Cloud Run is not found. Please check if the service exists and try again."
            exit 1
          fi

          # Wait for the Cloud Run service ingress to be ready and the API to be reachable.
          echo "NOTE: Waiting for the API to be reachable..."

          # Continuously check the API's HTTP status until it returns a 200 (success).
          while true; do
            # Send a POST request to the API and capture the HTTP status code.
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$SERVICE_URL/candidate/John%20Smith")

            # If the HTTP status is 200, the API is reachable.
            if [[ "$HTTP_STATUS" == "200" ]]; then
              echo "NOTE: API is now reachable."
              break
            else
              # If the API is not yet reachable, print a warning and retry after 30 seconds.
              echo "WARNING: API is not yet reachable (HTTP $HTTP_STATUS). Retrying..."
              sleep 30
            fi
          done

          # Navigate to the "02-docker" directory where the test script is located.
          cd ./02-docker

          # Print a message indicating that the GCP Cloud Run solution is being tested.
          echo "NOTE: Testing the GCP Cloud Run Solution."
          echo "NOTE: URL for GCP Cloud Run is $SERVICE_URL/gtg?details=true"

          # Run the test script (`test_candidates.py`) with the service URL as an argument.
          ./test_candidates.py "$SERVICE_URL"