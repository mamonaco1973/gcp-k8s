# =============================================================
# Deployment: flask-app (Python Web App on Port 8000)
# =============================================================
apiVersion: apps/v1                   # API group for managing Deployments
kind: Deployment                      # Declares a Kubernetes Deployment resource
metadata:
  name: flask-app                     # Name of the Deployment object

spec:
  replicas: 2                         # Start with 2 replicas (pods) of the Flask app

  selector:
    matchLabels:
      app: flask-app                  # Match Pods with the label app=flask-app

  template:
    metadata:
      labels:
        app: flask-app                # Label applied to each Pod for selection by Service and HPA

    spec:
      serviceAccountName: firestore-access-sa  # Use a specific service account for access to firestore       
      containers:
        - name: flask-app                       # Container name within the Pod
           
          image:  $IMAGE
                                                # Pull the image from Amazon ECR using a release candidate tag

          ports:
            - containerPort: 8000               # Expose port 8000 (Flask app default)

          livenessProbe:
            httpGet:
              path: /gtg                        # Health check endpoint (same as ALB health check)
              port: 8000                        # Target port inside container
            initialDelaySeconds: 60             # Delay before the first check after startup
            periodSeconds: 30                   # Frequency of health checks
            failureThreshold: 6                 # Pod is considered unhealthy after 6 consecutive failures
            timeoutSeconds: 10

---
# =============================================================
# Service: flask-app-service
# =============================================================
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service

spec:
  selector:
    app: flask-app

  ports:
    - protocol: TCP
      port: 80           # External port exposed via Load Balancer
      targetPort: 8000   # Internal container port

  type: LoadBalancer     # ðŸ‘‰ This creates a native Azure Load Balancer + public IP

---
# =============================================================
# Horizontal Pod Autoscaler: flask-app-hpa
# =============================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: flask-app-hpa                # Name of the HPA resource

spec:
  scaleTargetRef:
    apiVersion: apps/v1             # Target the Deployment API group
    kind: Deployment                # Type of resource to scale
    name: flask-app                 # Target the "flask-app" Deployment for scaling

  minReplicas: 2                    # Minimum number of pods to maintain
  maxReplicas: 5                    # Maximum number of pods that can be created based on load

  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization         # Target CPU utilization metric
          averageUtilization: 60    # Target average CPU usage at 60% before scaling up
